generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= ENUMS =============
enum Role {
  ADMIN
  TEACHER
  REVIEWER
  STUDENT
  GENERALUSER
}

enum TeamStatus {
  ACTIVE
  RECRUITING
  INACTIVE
}

enum TeamVisibility {
  PUBLIC
  PRIVATE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TeamRole {
  LEAD
  RESEARCHER
  ASSISTANT
}

enum PaperStatus {
  PENDING
  ACCEPTED
  REJECTED
  UNDER_REVIEW
}

enum ReviewerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

// ============= MODELS =============

model user {
  user_id     Int      @id @default(autoincrement())
  name        String?
  email       String?  @unique
  password    String?
  role        Role?
  isVerified  Boolean  @default(false)
  isMainAdmin Boolean  @default(false)
  verifyToken String?
  created_at  DateTime @default(now())

  // Relations
  student     student[]
  teacher     teacher[]
  teammember  teammember[]
  admin       admin[]
  generaluser generaluser[]
  userdomain  userdomain[]
  team        team[]
  teamcomment teamcomment[]
}

model admin {
  admin_id Int  @id @default(autoincrement())
  user_id  Int?

  // Relations
  user               user?                @relation(fields: [user_id], references: [user_id])
  reviewerassignment reviewerassignment[]
}

model department {
  department_id   Int     @id @default(autoincrement())
  department_name String? @unique

  // Relations
  students         student[]
  teachers         teacher[]
  departmentdomain departmentdomain[]
}

model domain {
  domain_id   Int     @id @default(autoincrement())
  domain_name String? @unique

  // Relations
  departmentdomain   departmentdomain[]
  userdomain         userdomain[]
  reviewerpreference reviewerpreference[]
  paper              paper[]
  proposal           proposal[]
  team               team[]
}

model departmentdomain {
  department_id Int @default(autoincrement())
  domain_id     Int

  // Relations
  department department @relation(fields: [department_id], references: [department_id])
  domain     domain     @relation(fields: [domain_id], references: [domain_id])

  @@id([department_id, domain_id])
}

model generaluser {
  generaluser_id Int  @id @default(autoincrement())
  user_id        Int?

  // Relations
  user user? @relation(fields: [user_id], references: [user_id])
}

model student {
  student_id    Int     @id @default(autoincrement())
  roll_number   String?
  department_id Int?
  user_id       Int?

  // Relations
  user       user?       @relation(fields: [user_id], references: [user_id])
  department department? @relation(fields: [department_id], references: [department_id])

  teamapplication teamapplication[]
}

model teacher {
  teacher_id    Int     @id @default(autoincrement())
  designation   String?
  department_id Int?
  user_id       Int?
  isReviewer    Boolean @default(false)

  // Relations
  user       user?       @relation(fields: [user_id], references: [user_id])
  department department? @relation(fields: [department_id], references: [department_id])

  paper    paper[]
  proposal proposal[]
  reviewer reviewer?
}

model reviewer {
  reviewer_id Int             @id
  teacher_id  Int?            @unique
  status      ReviewerStatus? @default(ACTIVE)

  // Relations
  teacher teacher? @relation(fields: [teacher_id], references: [teacher_id])

  review             review[]
  reviewerassignment reviewerassignment[]
  reviewerpreference reviewerpreference[]
}

model reviewerpreference {
  reviewer_id Int
  domain_id   Int

  // Relations
  reviewer reviewer @relation(fields: [reviewer_id], references: [reviewer_id])
  domain   domain   @relation(fields: [domain_id], references: [domain_id])

  @@id([reviewer_id, domain_id])
}

model team {
  team_id            Int             @id @default(autoincrement())
  team_name          String?
  team_description   String?
  domain_id          Int?
  status             TeamStatus?
  visibility         TeamVisibility?
  max_members        Int?
  isHiring           Boolean?
  created_at         DateTime        @default(now())
  created_by_user_id Int?

  // Relations
  domain          domain? @relation(fields: [domain_id], references: [domain_id])
  created_by_user user?   @relation(fields: [created_by_user_id], references: [user_id])

  paper           paper[]
  proposal        proposal[]
  teammember      teammember[]
  teamapplication teamapplication[]
  teamcomment     teamcomment[]
}

model teammember {
  team_id      Int
  user_id      Int
  role_in_team TeamRole?

  // Relations
  team team @relation(fields: [team_id], references: [team_id])
  user user @relation(fields: [user_id], references: [user_id])

  @@id([team_id, user_id])
}

model teamapplication {
  application_id Int               @id @default(autoincrement())
  team_id        Int
  student_id     Int
  status         ApplicationStatus @default(PENDING)
  applied_at     DateTime          @default(now())

  // Relations
  team    team    @relation(fields: [team_id], references: [team_id])
  student student @relation(fields: [student_id], references: [student_id])

  @@unique([team_id, student_id])
}

model teamcomment {
  comment_id Int      @id @default(autoincrement())
  team_id    Int
  user_id    Int
  comment    String
  created_at DateTime @default(now())

  // Relations
  team team @relation(fields: [team_id], references: [team_id])
  user user @relation(fields: [user_id], references: [user_id])
}

model paper {
  paper_id     Int          @id @default(autoincrement())
  title        String?
  abstract     String?
  status       PaperStatus? @default(PENDING)
  team_id      Int?
  submitted_by Int?
  domain_id    Int?
  pdf_path     String?
  file_size    Int?
  created_at   DateTime     @default(now())

  // Relations
  team    team?    @relation(fields: [team_id], references: [team_id])
  teacher teacher? @relation(fields: [submitted_by], references: [teacher_id])
  domain  domain?  @relation(fields: [domain_id], references: [domain_id])

  review             review[]
  reviewerassignment reviewerassignment[]
}

model proposal {
  proposal_id  Int          @id @default(autoincrement())
  title        String?
  abstract     String?
  status       PaperStatus? @default(PENDING)
  team_id      Int?
  submitted_by Int?
  domain_id    Int?
  pdf_path     String?
  file_size    Int?
  created_at   DateTime     @default(now())

  // Relations
  team    team?    @relation(fields: [team_id], references: [team_id])
  teacher teacher? @relation(fields: [submitted_by], references: [teacher_id])
  domain  domain?  @relation(fields: [domain_id], references: [domain_id])

  review             review[]
  reviewerassignment reviewerassignment[]
}

model review {
  review_id   Int      @id @default(autoincrement())
  reviewer_id Int?
  proposal_id Int?
  paper_id    Int?
  comments    String?
  score       Int?
  decision    String?
  reviewed_at DateTime @default(now())

  // Relations
  reviewer reviewer? @relation(fields: [reviewer_id], references: [reviewer_id])
  proposal proposal? @relation(fields: [proposal_id], references: [proposal_id])
  paper    paper?    @relation(fields: [paper_id], references: [paper_id])
}

model reviewerassignment {
  assignment_id Int  @id @default(autoincrement())
  reviewer_id   Int?
  proposal_id   Int?
  paper_id      Int?
  assigned_by   Int?

  // Relations
  reviewer reviewer? @relation(fields: [reviewer_id], references: [reviewer_id])
  proposal proposal? @relation(fields: [proposal_id], references: [proposal_id])
  paper    paper?    @relation(fields: [paper_id], references: [paper_id])
  admin    admin?    @relation(fields: [assigned_by], references: [admin_id])
}

model userdomain {
  user_id   Int
  domain_id Int

  // Relations
  user   user   @relation(fields: [user_id], references: [user_id])
  domain domain @relation(fields: [domain_id], references: [domain_id])

  @@id([user_id, domain_id])
}
